const SerialPort = require("serialport");
const Readline = require("@serialport/parser-readline");
const parser = new Readline();
const fs = require("fs");

var DATA_FROM_DEVICE = [
  {
    type: "01",
    data: {
      firstname: "lotte",
      lastname: "chatechan"
    }
  }
];
const port = new SerialPort(
  "COM3",
  { baudRate: 9600, autoOpen: false },
  err => {
    if (err) return console.log("Error: ", err.message);
    console.log("New port");
  }
);
port.pipe(parser);

port.open(err => {
  if (err) return console.log("Error opening port: ", err.message);
});
port.on("open", () => {
  console.log("==OPEN PORT==");
});

// Read data that is available but keep the stream from entering //"flowing mode"
port.on("readable", function() {
  DATA_FROM_DEVICE = port.read().toString();
  console.log("DATA: ", DATA_FROM_DEVICE);
});

exports.writeData = (req, res) => {
  // res.status(200).json({success: true})
  port.open(() => {
    port.write(req.body.text, err => {
      if (err) return err.message;

      res.status(200).json({ success: true });
      console.log("==== message written");
    });
  });
  console.log("COMMAND:", req.body.text);
};

exports.getData = (req, res) => {
  res.status(200).json(DATA_FROM_DEVICE);
};

exports.testDecode = (req, res) => {
  var b64Encoded =
    " MTEwMjAwMjY2NjYzMyA6IOC4meC4suC4oiDguJPguLHguJDguJjguKMgIOC4iuC4t+C5iOC4meC5geC4quC4h+C4reC4o+C4uOC4kyA6IE1yLiBOYXR0YXRvcm4gIENodWVuc2FlbmdhcnVuIDogODgvNjggICDguIvguK3guKLguKPguLLguIrguJ7guKTguIHguKnguYwgOSAg4LmB4LiC4Lin4LiH4Lia4Liy4LiH4LmA4LiK4Li34Lit4LiB4Lir4LiZ4Lix4LiHIOC5gOC4guC4leC4leC4peC4tOC5iOC4h+C4iuC4seC4mSDguIHguKPguLjguIfguYDguJfguJ7guKHguKvguLLguJnguITguKMgOiAyNSDguJ4u4LiiLiAyNTM5IDog4LiX4LmJ4Lit4LiH4LiW4Li04LmI4LiZ4LmA4LiC4LiV4Lig4Liy4Lip4Li14LmA4LiI4Lij4Li04LiNL+C4geC4o+C4uOC4h+C5gOC4l+C4nuC4oeC4q+C4suC4meC4hOC4";
  b64Encoded = b64Encoded.split(" ");
  console.log(b64Encoded);
  console.log(Buffer.from(b64Encoded[1], "base64").toString());
  fs.writeFile("image.png", b64Encoded[0], { encoding: "base64" }, function(
    err
  ) {
    console.log("File created");
  });
};
